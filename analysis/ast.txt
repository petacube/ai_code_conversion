test_that
  can pivot all cols to long
  {
    <-
      df
      tibble
        :
          1
          2
        :
          3
          4
    <-
      pv
      pivot_longer
        df
        :
          x
          y
    expect_named
      pv
      c
        name
        value
    expect_equal
      $
        pv
        name
      rep
        names
          df
        2
    expect_equal
      $
        pv
        value
      c
        1
        3
        2
        4
test_that
  values interleaved correctly
  {
    <-
      df
      tibble
        c
          1
          2
        c
          10
          20
        c
          100
          200
        
    <-
      pv
      pivot_longer
        df
        :
          1
          3
    expect_equal
      $
        pv
        value
      c
        1
        10
        100
        2
        20
        200
test_that
  can add multiple columns from spec
  {
    <-
      df
      tibble
        :
          1
          2
        :
          3
          4
    <-
      sp
      tibble
        c
          x
          y
        v
        1
        2
    <-
      pv
      pivot_longer_spec
        df
        sp
    expect_named
      pv
      c
        a
        b
        v
test_that
  preserves original keys
  {
    <-
      df
      tibble
        :
          1
          2
        2
        :
          1
          2
    <-
      pv
      pivot_longer
        df
        :
          y
          z
    expect_named
      pv
      c
        x
        name
        value
    expect_equal
      $
        pv
        x
      rep
        $
          df
          x
        2
test_that
  can drop missing values
  {
    <-
      df
      data.frame
        c
          1
          NA
        c
          NA
          2
    <-
      pv
      pivot_longer
        df
        :
          x
          y
        TRUE
    expect_equal
      $
        pv
        name
      c
        x
        y
    expect_equal
      $
        pv
        value
      c
        1
        2
test_that
  can handle missing combinations
  {
    <-
      df
      tribble
        ~
          id
        ~
          x_1
        ~
          x_2
        ~
          y_2
        A
        1
        2
        a
        B
        3
        4
        b
        
    <-
      pv
      pivot_longer
        df
        -
          id
        c
          .value
          n
        _
    expect_named
      pv
      c
        id
        n
        x
        y
    expect_equal
      $
        pv
        x
      :
        1
        4
    expect_equal
      $
        pv
        y
      c
        NA
        a
        NA
        b
test_that
  mixed columns are automatically coerced
  {
    <-
      df
      data.frame
        factor
          a
        factor
          b
    <-
      pv
      pivot_longer
        df
        :
          x
          y
    expect_equal
      $
        pv
        value
      factor
        c
          a
          b
test_that
  can override default output column type
  {
    <-
      df
      tibble
        x
        1
    <-
      pv
      pivot_longer
        df
        :
          x
          y
        list
          as.list
    expect_equal
      $
        pv
        value
      list
        x
        1
test_that
  can pivot to multiple measure cols
  {
    <-
      df
      tibble
        x
        1
    <-
      sp
      tribble
        ~
          .name
        ~
          .value
        ~
          row
        x
        X
        1
        y
        Y
        1
        
    <-
      pv
      pivot_longer_spec
        df
        sp
    expect_named
      pv
      c
        row
        X
        Y
    expect_equal
      $
        pv
        X
      x
    expect_equal
      $
        pv
        Y
      1
test_that
  original col order is preserved
  {
    <-
      df
      tribble
        ~
          id
        ~
          z_1
        ~
          y_1
        ~
          x_1
        ~
          z_2
        ~
          y_2
        ~
          x_2
        A
        1
        2
        3
        4
        5
        6
        B
        7
        8
        9
        10
        11
        12
        
    <-
      pv
      pivot_longer
        df
        -
          id
        c
          .value
          n
        _
    expect_named
      pv
      c
        id
        n
        z
        y
        x
test_that
  handles duplicated column names
  {
    <-
      df
      tibble
        1
        1
        2
        3
        4
        minimal
    <-
      pv
      pivot_longer
        df
        -
          x
    expect_named
      pv
      c
        x
        name
        value
    expect_equal
      $
        pv
        name
      c
        a
        a
        b
        b
    expect_equal
      $
        pv
        value
      :
        1
        4
test_that
  can pivot duplicated names to .value
  {
    <-
      df
      tibble
        1
        1
        2
        3
        4
    <-
      pv1
      pivot_longer
        df
        -
          x
        c
          .value
          NA
        _
    <-
      pv2
      pivot_longer
        df
        -
          x
        c
          .value
          NA
        (.)_(.)
    <-
      pv3
      pivot_longer
        df
        -
          x
        .value
        (.)_.
    expect_named
      pv1
      c
        x
        a
        b
    expect_equal
      $
        pv1
        a
      c
        1
        2
    expect_equal
      pv2
      pv1
    expect_equal
      pv3
      pv1
test_that
  .value can be at any position in `names_to`
  {
    <-
      samp
      tibble
        :
          1
          4
        rnorm
          4
        rnorm
          4
        rep
          3
          4
        rep
          -
            2
          4
        
    <-
      value_first
      pivot_longer
        samp
        -
          i
        c
          .value
          time
        _
    <-
      samp2
      ::
      dplyr
      rename
        samp
        y_t1
        y_t2
        z_t1
        z_t2
    <-
      value_second
      pivot_longer
        samp2
        -
          i
        c
          time
          .value
        _
    expect_identical
      value_first
      value_second
test_that
  type error message use variable names
  {
    <-
      df
      data.frame
        1
        b
    <-
      err
      capture_error
        pivot_longer
          df
          everything
    expect_s3_class
      err
      vctrs_error_incompatible_type
    expect_equal
      $
        err
        x_arg
      abc
    expect_equal
      $
        err
        y_arg
      xyz
test_that
  when `values_ptypes` is provided, the type error uses variable names (#1364)
  {
    <-
      df
      tibble
        1
    expect_snapshot
      TRUE
      {
        pivot_longer
          df
          x
          character
test_that
  when `names_ptypes` is provided, the type error uses `names_to` names (#1364)
  {
    <-
      df
      tibble
        1
    expect_snapshot
      TRUE
      {
        pivot_longer
          df
          x
          name
          double
test_that
  error when overwriting existing column
  {
    <-
      df
      tibble
        1
        2
    expect_snapshot
      pivot_longer
        df
        y
        x
      TRUE
    expect_snapshot
      <-
        out
        pivot_longer
          df
          y
          x
          unique
    expect_named
      out
      c
        x...1
        x...2
        value
test_that
  grouping is preserved
  {
    <-
      df
      tibble
        1
        1
        2
    <-
      out
      %>%
        %>%
          df
          ::
          dplyr
          group_by
            g
        pivot_longer
          :
            x1
            x2
          x
          v
    expect_equal
      ::
      dplyr
      group_vars
        out
      g
test_that
  zero row data frame works
  {
    <-
      df
      tibble
        integer
        integer
    <-
      pv
      pivot_longer
        df
        :
          x
          y
    expect_named
      pv
      c
        name
        value
    expect_equal
      $
        pv
        name
      character
    expect_equal
      $
        pv
        value
      integer
test_that
  `cols_vary` can adjust the resulting row ordering (#1312)
  {
    <-
      df
      tibble
        c
          1
          2
        c
          3
          4
    expect_identical
      pivot_longer
        df
        c
          x
          y
        fastest
      tibble
        c
          x
          y
          x
          y
        c
          1
          3
          2
          4
    expect_identical
      pivot_longer
        df
        c
          x
          y
        slowest
      tibble
        c
          x
          x
          y
          y
        c
          1
          2
          3
          4
test_that
  `cols_vary` works with id columns not part of the pivoting process
  {
    <-
      df
      tibble
        c
          a
          b
        c
          1
          2
        c
          3
          4
    <-
      out
      pivot_longer
        df
        c
          x
          y
        fastest
    expect_identical
      $
        out
        id
      c
        a
        a
        b
        b
    expect_identical
      [
        out
        c
          name
          value
      pivot_longer
        [
          df
          c
            x
            y
        c
          x
          y
        fastest
    <-
      out
      pivot_longer
        df
        c
          x
          y
        slowest
    expect_identical
      $
        out
        id
      c
        a
        b
        a
        b
    expect_identical
      [
        out
        c
          name
          value
      pivot_longer
        [
          df
          c
            x
            y
        c
          x
          y
        slowest
test_that
  adjusting `cols_vary` works fine with `values_drop_na`
  {
    <-
      df
      tibble
        c
          a
          b
        c
          1
          NA
        c
          3
          4
    expect_identical
      pivot_longer
        df
        c
          x
          y
        slowest
        TRUE
      tibble
        c
          a
          a
          b
        c
          x
          y
          y
        c
          1
          3
          4
test_that
  validates inputs
  {
    <-
      df
      tibble
        1
    expect_error
      build_longer_spec
        df
        x
        [
          letters
          :
            1
            2
      vctrs_error_assert
test_that
  no names doesn't generate names (#1120)
  {
    <-
      df
      tibble
        1
    expect_identical
      colnames
        build_longer_spec
          df
          x
          character
      c
        .name
        .value
    expect_identical
      colnames
        build_longer_spec
          df
          x
      c
        .name
        .value
test_that
  multiple names requires names_sep/names_pattern
  {
    <-
      df
      tibble
        1
    expect_snapshot
      TRUE
      {
        build_longer_spec
          df
          x_y
          c
            a
            b
    expect_snapshot
      TRUE
      {
        build_longer_spec
          df
          x_y
          c
            a
            b
          x
          x
test_that
  names_sep generates correct spec
  {
    <-
      df
      tibble
        1
    <-
      sp
      build_longer_spec
        df
        x_y
        c
          a
          b
        _
    expect_equal
      $
        sp
        a
      x
    expect_equal
      $
        sp
        b
      y
test_that
  names_sep fails with single name
  {
    <-
      df
      tibble
        1
    expect_snapshot
      TRUE
      {
        build_longer_spec
          df
          x_y
          x
          _
test_that
  names_pattern generates correct spec
  {
    <-
      df
      tibble
        1
    <-
      sp
      build_longer_spec
        df
        zx_y
        c
          a
          b
        z(.)_(.)
    expect_equal
      $
        sp
        a
      x
    expect_equal
      $
        sp
        b
      y
    <-
      sp
      build_longer_spec
        df
        zx_y
        a
        z(.)
    expect_equal
      $
        sp
        a
      x
test_that
  names_to can override value_to
  {
    <-
      df
      tibble
        1
    <-
      sp
      build_longer_spec
        df
        x_y
        c
          a
          .value
        _
    expect_equal
      $
        sp
        .value
      y
test_that
  names_prefix strips off from beginning
  {
    <-
      df
      tibble
        1
    <-
      sp
      build_longer_spec
        df
        zzyz
        z
    expect_equal
      $
        sp
        name
      zyz
test_that
  can cast to custom type
  {
    <-
      df
      tibble
        1
    <-
      sp
      build_longer_spec
        df
        w1
        w
        list
          as.integer
    expect_equal
      $
        sp
        name
      1
test_that
  transform is applied before cast (#1233)
  {
    <-
      df
      tibble
        1
    <-
      sp
      build_longer_spec
        df
        w1
        w
        list
          integer
        list
          as.numeric
    expect_identical
      $
        sp
        name
      1
test_that
  `names_ptypes` and `names_transform` work with single values (#1284)
  {
    <-
      df
      tibble
        1
    <-
      res
      build_longer_spec
        df
        1x2
        c
          one
          two
        x
        as.numeric
    expect_identical
      $
        res
        one
      1
    expect_identical
      $
        res
        two
      2
    <-
      res
      build_longer_spec
        df
        1x2
        c
          one
          two
        x
        as.numeric
        integer
    expect_identical
      $
        res
        one
      1
    expect_identical
      $
        res
        two
      2
test_that
  `names_ptypes = list()` is interpreted as recycling <list> for all name columns (#1296)
  {
    <-
      df
      tibble
        1
    <-
      res
      build_longer_spec
        df
        1x2
        c
          one
          two
        x
        as.list
        list
    expect_identical
      $
        res
        one
      list
        1
    expect_identical
      $
        res
        two
      list
        2
test_that
  `values_ptypes` works with single empty ptypes (#1284)
  {
    <-
      df
      tibble
        1
        2
    <-
      res
      pivot_longer
        df
        everything
        c
          .value
          set
        _
        integer
    expect_identical
      $
        res
        x
      1
    expect_identical
      $
        res
        y
      2
test_that
  `values_ptypes = list()` is interpreted as recycling <list> for all value columns (#1296)
  {
    <-
      df
      tibble
        list_of
          1
          :
            2
            3
          4
        list_of
          :
            2
            3
          4
          :
            5
            6
    <-
      res
      pivot_longer
        df
        everything
        c
          .value
          set
        _
        list
    expect_identical
      $
        res
        x
      vec_cast
        $
          df
          x_1
        list
    expect_identical
      $
        res
        y
      vec_cast
        $
          df
          y_1
        list
test_that
  `values_transform` works with single functions (#1284)
  {
    <-
      df
      tibble
        1
        2
    <-
      res
      pivot_longer
        df
        everything
        c
          .value
          set
        _
        as.character
    expect_identical
      $
        res
        x
      1
    expect_identical
      $
        res
        y
      2
test_that
  Error if the `col` can't be selected.
  {
    expect_snapshot
      TRUE
      {
        pivot_longer
          iris
          matches
            foo
test_that
  named `cols` gives clear error (#1104)
  {
    <-
      df
      data.frame
        1
        2
    expect_snapshot
      pivot_longer
        df
        c
          y
      TRUE
test_that
  `names_to` is validated
  {
    <-
      df
      tibble
        1
    expect_snapshot
      TRUE
      {
        build_longer_spec
          df
          x
          1
    expect_snapshot
      TRUE
      {
        build_longer_spec
          df
          x
          c
            x
            y
    expect_snapshot
      TRUE
      {
        build_longer_spec
          df
          x
          c
            x
            y
          _
          x
test_that
  `names_ptypes` is validated
  {
    <-
      df
      tibble
        1
    expect_snapshot
      TRUE
      {
        build_longer_spec
          df
          x
          1
    expect_snapshot
      TRUE
      {
        build_longer_spec
          df
          x
          list
            integer
test_that
  `names_transform` is validated
  {
    <-
      df
      tibble
        1
    expect_snapshot
      TRUE
      {
        build_longer_spec
          df
          x
          1
    expect_snapshot
      TRUE
      {
        build_longer_spec
          df
          x
          list
            ~
              .x
test_that
  `values_ptypes` is validated
  {
    <-
      df
      tibble
        1
    expect_snapshot
      TRUE
      {
        pivot_longer
          df
          x
          1
    expect_snapshot
      TRUE
      {
        pivot_longer
          df
          x
          list
            integer
test_that
  `values_transform` is validated
  {
    <-
      df
      tibble
        1
    expect_snapshot
      TRUE
      {
        pivot_longer
          df
          x
          1
    expect_snapshot
      TRUE
      {
        pivot_longer
          df
          x
          list
            ~
              .x
test_that
  `cols_vary` is validated
  {
    <-
      df
      tibble
        1
    expect_snapshot
      TRUE
      {
        pivot_longer
          df
          x
          fast
    expect_snapshot
      TRUE
      {
        pivot_longer
          df
          x
          1
test_that
  `pivot_longer()` catches unused input passed through the dots
  {
    <-
      df
      tibble
        c
          a
          b
        c
          1
          2
        c
          3
          4
    expect_snapshot
      TRUE
      {
        pivot_longer
          df
          c
            x
            y
          1
    expect_snapshot
      TRUE
      {
        pivot_longer
          df
          c
            x
            y
          slowest
test_that
  `build_longer_spec()` requires empty dots
  {
    <-
      df
      tibble
        c
          a
          b
        c
          1
          2
        c
          3
          4
    expect_snapshot
      TRUE
      {
        build_longer_spec
          df
          c
            x
            y
          1
    expect_snapshot
      TRUE
      {
        build_longer_spec
          df
          c
            x
            y
          name
test_that
  `pivot_longer_spec()` requires empty dots
  {
    <-
      df
      tibble
        c
          a
          b
        c
          1
          2
        c
          3
          4
    <-
      spec
      build_longer_spec
        df
        c
          x
          y
    expect_snapshot
      TRUE
      {
        pivot_longer_spec
          df
          spec
          1
    expect_snapshot
      TRUE
      {
        pivot_longer_spec
          df
          spec
          slowest
